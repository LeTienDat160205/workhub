<!DOCTYPE html>
<html lang="vi">

<head>
  <meta charset="UTF-8" />
  <title>WorkHub Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="/frontend/style.css">
</head>

<body>
  <div id="toast-container"></div>
  <div class="dashboard-frame">
    <!-- HEADER -->
    <div class="dashboard-header" style="margin-top: 0">
      <div class="logo-bar">
        <a href="/" class="site-name"
          style="text-decoration: none; font-size: 35px; font-weight: 900; letter-spacing: 1.5px">WorkHub</a>
      </div>
      <div class="header-actions actions-cluster">
        <button class="icon-btn" title="Menu" aria-label="Menu">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <line x1="3" y1="6" x2="21" y2="6" stroke-width="2" />
            <line x1="3" y1="12" x2="21" y2="12" stroke-width="2" />
            <line x1="3" y1="18" x2="21" y2="18" stroke-width="2" />
          </svg>
        </button>
        <button class="icon-btn" id="btnTheme" title="Chuyển chế độ sáng/tối" aria-pressed="false">
          <svg id="themeIcon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <circle cx="12" cy="12" r="5" stroke-width="2" />
            <path
              d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"
              stroke-width="2" />
          </svg>
        </button>
        <button class="icon-btn" id="btnCalendar" title="Lịch" aria-label="Lịch">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2" stroke-width="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6" stroke-width="2"></line>
            <line x1="8" y1="2" x2="8" y2="6" stroke-width="2"></line>
            <line x1="3" y1="10" x2="21" y2="10" stroke-width="2"></line>
          </svg>
        </button>
        <button class="icon-btn" id="btnNotif" title="Thông báo" aria-label="Thông báo">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path d="M18 8a6 6 0 10-12 0c0 7-3 9-3 9h18s-3-2-3-9" stroke-width="2"></path>
            <path d="M13.73 21a2 2 0 01-3.46 0" stroke-width="2"></path>
          </svg>
        </button>
        <!-- account -->
        <div class="user-account" id="openProfile" title="Account" style="position: relative">
          <div style="position: relative">
            <div id="avatarWrapper"
              style="width: 32px; height: 32px; border-radius: 50%; background: #cbd5e1;  display: flex; align-items: center; justify-content: center;">
              <img id="avatarPreview" name="avatarPath" alt="avatar"
                src="<%= user.avatarPath || '/uploads/default-avatar.png' %>"
                style="width: 32px; height: 32px; border-radius: 50%; background: #cbd5e1; display: flex; align-items: center; justify-content: center;" />
              <span
                style="position: absolute; bottom: 0; right: -2px; width: 10px; height: 10px; background: #22c55e; border-radius: 50%; border: 2px solid var(--surface); display: block;">
              </span>
            </div>
          </div>
          <div style="display: flex; flex-direction: column; align-items: flex-start;">
            <span style="font-weight: 700; font-size: 1.08rem; line-height: 1.1; color: var(--text);">
              <%= user.name || 'Tên người dùng' %>
            </span>
            <span style="font-size: 0.97rem; color: var(--text-muted); line-height: 1.1;">
              <%= user.email || '@example.com' %>
            </span>
          </div>
          <svg style="margin-left: 8px" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2"
            viewBox="0 0 24 24">
            <path d="M6 9l6 6 6-6" />
          </svg>

          <div id="userMenu" style="
                display: none;
                position: absolute;
                top: 48px;
                right: 0;
                min-width: 180px;
                background: var(--surface);
                border-radius: 10px;
                box-shadow: var(--shadow-soft);
                padding: 10px 0;
                z-index: 100;
                border: 1px solid var(--border-color);
              ">
            <button style="
                  width: 100%;
                  background: none;
                  border: none;
                  text-align: left;
                  padding: 10px 18px;
                  font-size: 1rem;
                  color: var(--primary);
                  cursor: pointer;
                " id="Profile">
              Xem thông tin
            </button>
            <button style="
                  width: 100%;
                  background: none;
                  border: none;
                  text-align: left;
                  padding: 10px 18px;
                  font-size: 1rem;
                  color: var(--primary);
                  cursor: pointer;
                " id="OpenSettings">
              Cài đặt người dùng
            </button>
            <button style="
                  width: 100%;
                  background: none;
                  border: none;
                  text-align: left;
                  padding: 10px 18px;
                  font-size: 1rem;
                  color: #ef4444;
                  cursor: pointer;
                " id="Logout">
              Đăng xuất
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- XỬ LÝ AVATAR -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const avatarPreview = document.getElementById("avatarPreview");
        const avatarWrapper = document.getElementById("avatarWrapper") || avatarPreview.parentElement;

        const userName = "<%= user.name || 'User' %>";
        const avatarSrc = "<%= user.avatarPath || '' %>";

        // Nếu người dùng chưa có ảnh avatar thật
        if (!avatarSrc || avatarSrc.includes("default-avatar")) {
          // Ẩn ảnh thật
          avatarPreview.style.display = "none";

          // Tạo avatar chữ cái đầu tiên
          const initial = userName.trim() ? userName.trim().charAt(0).toUpperCase() : "?";

          // Kiểm tra màu trong localStorage
          const colorKey = `avatarColor_${userName}`;
          let bgColor = localStorage.getItem(colorKey);

          // Nếu chưa có thì random 1 lần
          if (!bgColor) {
            const colors = ["#f87171", "#fb923c", "#facc15", "#4ade80", "#60a5fa", "#a78bfa", "#f472b6"];
            bgColor = colors[Math.floor(Math.random() * colors.length)];
            localStorage.setItem(colorKey, bgColor);
          }

          // Tạo avatar bằng chữ
          const letterAvatar = document.createElement("div");
          letterAvatar.textContent = initial;
          letterAvatar.style.cssText = `width: 100%;height: 100%;border-radius: 50%;background: ${bgColor};color: white;font-weight: 600; font-size: 1.2rem;display: flex;align-items: center;justify-content: center;`;
          avatarWrapper.appendChild(letterAvatar);
        } else {
          // Có ảnh thật thì hiển thị ảnh
          avatarPreview.src = avatarSrc;
          avatarPreview.style.display = "block";
        }

        // ====== Khi người dùng chọn ảnh mới ======
        const avatarInput = document.getElementById("avatarInput");
        if (avatarInput) {
          avatarInput.addEventListener("change", (event) => {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = () => {
              // Nếu đã có avatar chữ thì xóa
              const existingLetter = avatarWrapper.querySelector("div");
              if (existingLetter) existingLetter.remove();

              // Hiển thị ảnh mới
              avatarPreview.src = reader.result;
              avatarPreview.style.display = "block";
            };
            reader.readAsDataURL(file);
          });
        }
      });
    </script>

    <!-- POPUP XÁC NHẬN ĐĂNG XUẤT -->
    <div class="popup-overlay" id="popupLogout" aria-hidden="true">
      <div class="popup-content" role="dialog" aria-modal="true" aria-labelledby="logout-title">
        <div class="popup-header">
          <div id="logout-title" class="popup-title" style="color: red;">Đăng xuất</div>
          <button class="close-btn" id="closeLogoutBtn" aria-label="Đóng">&times;</button>
        </div>
        <div style="margin-top:12px">
          <p>Bạn chắc chắn muốn đăng xuất không?</p>
          <div style="display:flex;gap:10px;justify-content:flex-end;margin-top:16px">
            <button class="btn" id="logoutConfirmNo" type="button" style="background:#9e9e9e">Hủy</button>
            <button class="btn" id="logoutConfirmYes" type="button"
              style="background:var(--secondary); background-color: red">Đăng
              xuất</button>
          </div>
        </div>
      </div>
    </div>

    <!-- BODY -->
    <div class="dashboard-body" id="dashboardBody">
      <!-- SIDEBAR -->
      <div class="sidebar">
        <div class="sidebar-section">
          <div class="sidebar-search">
            <div class="mini-pill">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <circle cx="11" cy="11" r="7" stroke-width="2"></circle>
                <line x1="21" y1="21" x2="16.65" y2="16.65" stroke-width="2"></line>
              </svg>
              <input type="text" placeholder="Search" />
            </div>
          </div>
          <div class="sidebar-list" id="groupList"></div>
        </div>

        <!-- NÚT: TẠO NHÓM -->
        <button class="cssbuttons-io-button" id="btnAddGroup" title="Tạo nhóm">
          Tạo nhóm
          <div class="icon">
            <svg height="24" width="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path d="M12 5v14M5 12h14" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" fill="none" />
            </svg>
          </div>
        </button>
      </div>

      <!-- MAIN -->
      <div class="main-content" id="mainContent">
        <!-- POPUP TẠO NHÓM -->
        <div class="popup-overlay" id="popupGroup" aria-hidden="true">
          <div class="popup-content" role="dialog" aria-modal="true" aria-labelledby="create-group-title">
            <button class="close-btn" id="closeGroupPopup" aria-label="Đóng">
              &times;
            </button>
            <div class="popup-inner-content" style="flex-direction: column; width: 100%">
              <div>
                <div id="create-group-title" class="popup-title">
                  Tạo nhóm mới
                </div>
                <form id="groupForm" action="/groups" method="POST" style="
                    display: flex;
                    flex-direction: column;
                    gap: 18px;
                    min-width: 260px;
                  ">
                  <input type="hidden" name="csrf_token" value="" />
                  <div style="display: flex; flex-direction: column; gap: 6px">
                    <label style="height: 20px;"></label>
                    <input id="groupName" name="groupName" type="text" required placeholder="Nhập tên nhóm"
                      class="form-input" style="padding: 10px 13px" />
                  </div>
                  <div style="display: flex; justify-content: flex-end; gap: 12px">
                    <button type="button" class="btn" id="cancelGroupBtn" style="background: #9e9e9e">
                      Huỷ
                    </button>
                    <button type="submit" class="btn" id="createGroupBtn">
                      Tạo nhóm
                    </button>
                  </div>
                </form>

                <!-- hiển thị thông báo  -->
                <script>
                  function showToast(message, type = 'success') {
                    const container = document.getElementById('toast-container');
                    if (!container) return;
                    const toast = document.createElement('div');
                    toast.className = `toast ${type}`;
                    toast.textContent = message;

                    container.appendChild(toast);
                    setTimeout(() => toast.classList.add('show'), 100);
                    setTimeout(() => {
                      toast.classList.remove('show');
                      setTimeout(() => toast.remove(), 300);
                    }, 4000);
                  }
                </script>

                <!-- javascript hiện cửa sổ tạo nhóm -->
                <script>
                  const popupGroup = document.getElementById('popupGroup');
                  const btnAddGroup = document.getElementById('btnAddGroup');
                  const closeGroupPopup = document.getElementById('closeGroupPopup'); // nút X
                  const cancelGroupBtn = document.getElementById('cancelGroupBtn'); // nút Huỷ

                  // Hàm mở popup
                  function openGroupPopup() {
                    popupGroup.style.display = 'flex';
                    popupGroup.style.alignItems = 'center';
                    popupGroup.style.justifyContent = 'center';
                    popupGroup.style.backdropFilter = 'blur(2px)';
                  }

                  // Hàm đóng popup
                  function closeGroup() {
                    popupGroup.style.display = 'none';
                  }

                  // Sự kiện mở popup 
                  if (btnAddGroup) {
                    btnAddGroup.addEventListener('click', openGroupPopup);
                  }

                  // Sự kiện đóng popup khi bấm nút X hoặc Huỷ
                  closeGroupPopup.addEventListener('click', closeGroup);
                  cancelGroupBtn.addEventListener('click', closeGroup);

                  // Đóng popup khi click ra ngoài phần nội dung
                  popupGroup.addEventListener('click', function (e) {
                    if (e.target === popupGroup) {
                      closeGroup();
                    }
                  });
                  // ---------------------------------------------------
                  // Load danh sách nhóm đã tham gia
                  async function loadGroups() {
                    const groupList = document.getElementById('groupList');
                    if (!groupList) return;
                    groupList.innerHTML = '<div style="text-align:center;color:var(--text-muted);padding:20px;">Đang tải...</div>';
                    try {
                      const res = await fetch('/groups/my-groups', { credentials: 'same-origin' });
                      if (!res.ok) throw new Error('Lỗi khi tải nhóm');
                      const groups = await res.json();
                      if (!Array.isArray(groups) || groups.length === 0) {
                        groupList.innerHTML = '<div style="text-align:center;color:var(--text-muted);padding:20px;">Bạn chưa tham gia nhóm nào.</div>';
                        return;
                      }
                      groupList.innerHTML = groups.map(g => {
                        const leaderName = g.leaderName || 'Không rõ';
                        return `
                      <div class="group-card" data-id="${g.id}" style="cursor:pointer; border:1px solid #ddd; border-radius:8px; padding:10px 12px; margin:6px 0;">
                        <div class="group-title">${g.groupName}</div>
                        <div class="group-leader">Nhóm trưởng: <span>${leaderName}</span></div>
                      </div>
                      `;
                      }).join('');


                      // Thêm sự kiện click sau khi render
                      document.querySelectorAll('.group-card').forEach(card => {
                        card.addEventListener('click', () => {
                          const groupId = card.getAttribute('data-id');
                          window.location.href = `/groups/${groupId}`; // render group.ejs tương ứng
                        });
                      });
                    } catch (err) {
                      groupList.innerHTML = '<div style="color:#ef4444;text-align:center;padding:20px;">Lỗi khi tải danh sách nhóm.</div>';
                    }
                  }
                  window.addEventListener('DOMContentLoaded', loadGroups);

                  // card.addEventListener('click', () => {
                  //   document.querySelectorAll('.group-card').forEach(c => c.classList.remove('active'));
                  //   card.classList.add('active');
                  //   window.location.href = `/groups/${groupId}`;
                  // });

                  document.querySelector('.sidebar-search input').addEventListener('input', e => {
                    const keyword = e.target.value.toLowerCase();
                    document.querySelectorAll('.group-card').forEach(card => {
                      const name = card.querySelector('.group-title').textContent.toLowerCase();
                      card.style.display = name.includes(keyword) ? '' : 'none';
                    });
                  });

                  // Xử lý submit tạo nhóm
                  const groupForm = document.getElementById('groupForm');
                  if (groupForm) {
                    groupForm.addEventListener('submit', async function (e) {
                      e.preventDefault();
                      const groupName = document.getElementById('groupName').value.trim();
                      if (!groupName) return alert('Vui lòng nhập tên nhóm');
                      try {
                        const res = await fetch('/groups', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({ groupName }),
                          credentials: 'same-origin'
                        });
                        const data = await res.json();
                        // if (!res.ok) throw new Error(data.error || 'Lỗi tạo nhóm');
                        // alert('Tạo nhóm thành công!');
                        if (!res.ok) {
                          showToast(data.error || 'Lỗi tạo nhóm', 'error');
                        } else {
                          showToast('Tạo nhóm thành công!', 'success');
                        }

                        groupForm.reset();
                        document.getElementById('popupGroup').style.display = 'none';
                        loadGroups();
                      } catch (err) {
                        alert(err.message || 'Lỗi khi tạo nhóm');
                      }
                    });
                  }
                </script>
              </div>
            </div>
          </div>
        </div>

        <!-- Trang nhóm -->
        <div class="content-task" id="groupArea">
          <div class="chat-wrapper" style="display:flex;flex-direction:column">
            <div class="chat-header-bar">
              <div style="display:flex;flex-direction:column">
                <div style="font-weight:800;color:var(--text)">
                  <%= group.groupName %>
                </div>
                <div id="memberCountRight" style="font-size:0.9rem;color:var(--text-muted)">
                  <%= group.memberCount %> thành viên
                </div>
              </div>
              <div style="display:flex;gap:12px">
                <button id="addMemberBtnSmall"
                  style="background:linear-gradient(180deg,var(--primary) 0%,var(--primary-hover) 100%);color:var(--on-primary);border:none;padding:10px 16px;border-radius:10px;font-weight:700;box-shadow:0 6px 18px rgba(76,175,80,0.18);cursor:pointer">
                  Thêm thành viên
                </button>
                <button id="createTaskBtnSmall"
                  style="background:linear-gradient(180deg,var(--primary) 0%,var(--primary-hover) 100%);color:var(--on-primary);border:none;padding:10px 16px;border-radius:10px;font-weight:700;box-shadow:0 6px 18px rgba(76,175,80,0.18);cursor:pointer">
                  Tạo công việc
                </button>
                <button id="openGroupSettingsBtn"
                  style="background:linear-gradient(180deg,var(--primary) 0%,var(--primary-hover) 100%);color:var(--on-primary);border:none;padding:10px 16px;border-radius:10px;font-weight:700;box-shadow:0 6px 18px rgba(76,175,80,0.18);cursor:pointer">
                  Cài đặt
                </button>
                <!-- Thêm thành viên -->
                <div class="popup-overlay" id="popupMember" aria-hidden="true">
                  <div class="popup-content" role="dialog" aria-modal="true" aria-labelledby="create-group-title">
                    <button class="close-btn" id="closeMemberPopup" aria-label="Đóng">
                      &times;
                    </button>
                    <div class="popup-inner-content" style="flex-direction: column; width: 100%">
                      <div>
                        <div id="create-group-title" class="popup-title">
                          Thêm thành viên
                        </div>
                        <form id="memberForm" action="/groups" method="POST"
                          style="display: flex; flex-direction: column; gap: 18px; min-width: 260px;">
                          <input type="hidden" name="csrf_token" value="" />
                          <div style="display: flex; flex-direction: column; gap: 6px">
                            <label for="memberName" class="form-label" style="font-weight: 600">Tên tài
                              khoản/Email</label>
                            <input id="memberName" name="memberName" type="text" required
                              placeholder="Nhập tên tài khoản hoặc Email" class="form-input"
                              style="padding: 10px 13px" />
                          </div>
                          <div style="display: flex; justify-content: flex-end; gap: 12px">
                            <button type="button" class="btn" id="cancelMenberBtn"
                              style="background: #9e9e9e">Huỷ</button>
                            <button type="submit" class="btn" id="createGroupBtn">Thêm</button>
                          </div>
                        </form>

                        <!-- javascript hiện cửa sổ thêm thành viên -->
                        <script>
                          const popupMember = document.getElementById('popupMember');
                          const addMemberBtnSmall = document.getElementById('addMemberBtnSmall');
                          const closeMemberPopup = document.getElementById('closeMemberPopup'); // nút X
                          const cancelMenberBtn = document.getElementById('cancelMenberBtn'); // nút Huỷ

                          // Hàm mở popup
                          function openMemberPopup() {
                            popupMember.style.display = 'flex';
                            popupMember.style.alignItems = 'center';
                            popupMember.style.justifyContent = 'center';
                            popupMember.style.backdropFilter = 'blur(2px)';
                          }

                          // Hàm đóng popup
                          function closeMember() {
                            popupMember.style.display = 'none';
                          }

                          // Sự kiện mở popup 
                          if (addMemberBtnSmall) {
                            addMemberBtnSmall.addEventListener('click', openMemberPopup);
                          }

                          // Sự kiện đóng popup khi bấm nút X hoặc Huỷ
                          closeMemberPopup.addEventListener('click', closeMember);
                          cancelMenberBtn.addEventListener('click', closeMember);

                          // Đóng popup khi click ra ngoài phần nội dung
                          popupMember.addEventListener('click', function (e) {
                            if (e.target === popupMember) {
                              closeMember();
                            }
                          });

                          // XỬ LÝ THÊM THÀNH VIÊN 
                          const memberForm = document.getElementById("memberForm");
                          const memberNameInput = document.getElementById("memberName");
                          const groupId = "<%= group.id %>";

                          memberForm.addEventListener("submit", async (e) => {
                            e.preventDefault();
                            const memberName = memberNameInput.value.trim();
                            if (!memberName) {
                              showToast("Vui lòng nhập tên tài khoản hoặc email!", "warning");
                              return;
                            }

                            try {
                              const res = await fetch(`/groups/${groupId}/add-member`, {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                credentials: "same-origin",
                                body: JSON.stringify({ memberName }),
                              });

                              const result = await res.json();

                              // ✅ Kiểm tra phản hồi từ server
                              if (res.ok && result.success) {
                                // Thành công
                                showToast(result.message || "Đã thêm thành viên thành công.", "success");
                                closeMember(); // Đóng popup
                                memberNameInput.value = "";
                                loadMembers(); // Cập nhật danh sách
                              } else {
                                // Các lỗi cụ thể được trả về từ server
                                switch (res.status) {
                                  case 400:
                                    showToast(result.error || "Vui lòng nhập tên tài khoản hoặc email.", "warning");
                                    break;
                                  case 403:
                                    showToast(result.error || "Chỉ trưởng nhóm mới có quyền thêm thành viên.", "error");
                                    break;
                                  case 404:
                                    showToast(result.error || "Không tìm thấy tài khoản hoặc email này.", "error");
                                    break;
                                  case 409:
                                    showToast(result.error || "Người này đã là thành viên của nhóm.", "warning");
                                    break;
                                  default:
                                    showToast(result.error || "Thêm thành viên thất bại.", "error");
                                    break;
                                }
                              }
                            } catch (err) {
                              console.error("Lỗi fetch:", err);
                              showToast("Lỗi khi gửi yêu cầu đến máy chủ.", "error");
                            }
                          });
                        </script>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- ======= POPUP CÀI ĐẶT NHÓM ======= -->
            <div class="popup-overlay" id="popupGroupSettings" aria-hidden="true">
              <div class="popup-content" role="dialog" aria-modal="true" aria-labelledby="group-settings-title">
                <button class="close-btn" id="closeGroupSettings" aria-label="Đóng">&times;</button>
                <div class="popup-inner-content" style="flex-direction: column; width: 100%;">
                  <div id="group-settings-title" class="popup-title">Cài đặt nhóm</div>
                  <div style="height: 15px;"></div>
                  <div style="display: flex; flex-direction: column; gap: 18px; min-width: 260px;">
                    <p style="margin: 0; font-size: 15px;">Các chức năng khác sẽ được thêm sau.</p>

                    <!-- Nút Rời nhóm -->
                    <button id="openLeavePopup" style="background:red;color:white;border:none;padding:10px 14px;border-radius:10px;font-weight:700;cursor:pointer;">
                      Rời nhóm
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <!-- ======= POPUP XÁC NHẬN RỜI NHÓM ======= -->
            <div class="popup-overlay" id="popupLeaveGroup" aria-hidden="true">
              <div class="popup-content" role="dialog" aria-modal="true" aria-labelledby="leave-group-title">
                <button class="close-btn" id="closeLeavePopup" aria-label="Đóng">&times;</button>
                <div class="popup-inner-content" style="flex-direction: column; width: 100%; text-align: left;">
                  <div id="leave-group-title" class="popup-title" style="color: red; font-weight: 700;">
                    Rời nhóm
                  </div>

                  <div style="height: 10px;"></div>
                  <p style="margin: 15px 0 25px;">
                    Bạn có chắc chắn muốn <b>rời khỏi nhóm</b> này không?
                  </p>

                  <div style="display: flex; justify-content: right; gap: 12px;">
                    <button type="button" class="btn" id="cancelLeaveBtn" style="background: #9e9e9e;">Huỷ</button>
                    <button type="button" class="btn" id="confirmLeaveBtn" style="background: red;">Rời nhóm</button>
                  </div>
                </div>
              </div>
            </div>

            <!-- =================== JAVASCRIPT =================== -->
            <script>
              document.addEventListener("DOMContentLoaded", () => {
                // ========== Popup CÀI ĐẶT NHÓM ==========
                const popupGroupSettings = document.getElementById('popupGroupSettings');
                const btnOpenSettings = document.getElementById('openGroupSettingsBtn');
                const closeGroupSettings = document.getElementById('closeGroupSettings');

                function openGroupSettings() {
                  popupGroupSettings.style.display = 'flex';
                  popupGroupSettings.style.alignItems = 'center';
                  popupGroupSettings.style.justifyContent = 'center';
                  popupGroupSettings.style.backdropFilter = 'blur(2px)';
                }

                function closeGroupSettingsPopup() {
                  popupGroupSettings.style.display = 'none';
                }

                btnOpenSettings?.addEventListener('click', openGroupSettings);
                closeGroupSettings?.addEventListener('click', closeGroupSettingsPopup);

                popupGroupSettings.addEventListener('click', (e) => {
                  if (e.target === popupGroupSettings) closeGroupSettingsPopup();
                });

                // ========== Popup XÁC NHẬN RỜI NHÓM ==========
                const popupLeaveGroup = document.getElementById("popupLeaveGroup");
                const openLeavePopup = document.getElementById("openLeavePopup");
                const closeLeavePopup = document.getElementById("closeLeavePopup");
                const cancelLeaveBtn = document.getElementById("cancelLeaveBtn");
                const confirmLeaveBtn = document.getElementById("confirmLeaveBtn");
                const groupId = "<%= group.id %>";

                function openPopupLeave() {
                  closeGroupSettingsPopup();
                  popupLeaveGroup.style.display = "flex";
                  popupLeaveGroup.style.alignItems = "center";
                  popupLeaveGroup.style.justifyContent = "center";
                  popupLeaveGroup.style.backdropFilter = "blur(2px)";
                }

                function closePopupLeave() {
                  popupLeaveGroup.style.display = "none";
                }

                openLeavePopup?.addEventListener("click", openPopupLeave);
                closeLeavePopup?.addEventListener("click", closePopupLeave);
                cancelLeaveBtn?.addEventListener("click", closePopupLeave);

                popupLeaveGroup.addEventListener("click", (e) => {
                  if (e.target === popupLeaveGroup) closePopupLeave();
                });

                // ========== Khi xác nhận RỜI NHÓM ==========
                confirmLeaveBtn?.addEventListener("click", async () => {
                  closePopupLeave();

                  try {
                    const res = await fetch(`/groups/${groupId}/leave`, {
                      method: "POST",
                      eaders: { "Content-Type": "application/json" },
                      credentials: "same-origin"
                    });

                    console.log("Response status:", res.status);
                    const result = await res.json();

                    if (res.ok && result.success) {
                      showToast(result.message || "Bạn đã rời nhóm thành công!", "success");
                      setTimeout(() => (window.location.href = "/"), 2000);
                    } else {
                      showToast(result.error || "Không thể rời nhóm.", "error");
                    }
                  } catch (err) {
                    console.error("Lỗi khi gửi yêu cầu rời nhóm:", err);
                    showToast("Lỗi khi gửi yêu cầu rời nhóm.", "error");
                  }
                });
              });
            </script>

            <!-- khu vực chat -->
            <div class="outputChat"></div>

            <div class="inputChat">
              <label for="fileInput" class="sendFile">Chọn file</label>
              <input type="file" id="fileInput" style="display:none" />
              <input type="text" id="messageInput" placeholder="Nhập tin nhắn ...">
              <button class="sendMessage">Gửi</button>
            </div>
          </div>
        </div>
      </div>

      <!-- hiển thị thành viên trong nhóm -->
      <div class="right-column">
        <div class="right-panel">
          <div class="search-members">
            <input id="memberSearchRight" placeholder="Tìm kiếm thành viên..."
              style="width:100%;padding:10px;border-radius:8px;border:1px solid var(--border-color);background:var(--surface)">
          </div>
          <div id="membersWrapRight" class="member-list"></div>

          <!-- POPUP XÁC NHẬN XÓA NHÓM -->
          <div class="popup-overlay" id="popupDeleteGroup" aria-hidden="true">
            <div class="popup-content" role="dialog" aria-modal="true" aria-labelledby="delete-group-title">
              <button class="close-btn" id="closeDeletePopup" aria-label="Đóng">&times;</button>
              <div class="popup-inner-content" style="flex-direction: column; width: 100%; text-align: left;">
                <div id="delete-group-title" class="popup-title" style="color: red; font-weight: 700;">
                  Xóa nhóm
                </div>
                <div style="height: 10px;"></div>
                <p style="margin: 15px 0 25px;">Bạn có chắc chắn muốn xóa nhóm này không?</p>
                <div style="display: flex; justify-content: right; gap: 12px;">
                  <button type="button" class="btn" id="cancelDeleteBtn" style="background: #9e9e9e;">Huỷ</button>
                  <button type="button" class="btn" id="confirmDeleteBtn" style="background: red;">Xóa</button>
                </div>
              </div>
            </div>
          </div>

          <!-- Nút Xóa nhóm -->
          <div class="deleteGroup">
            <button id="openDeletePopup" class="btn btn-danger">Xóa nhóm</button>
          </div>

          <!-- Xử lý xóa nhóm -->
          <script>
            document.addEventListener("DOMContentLoaded", () => {
              // Lấy phần tử popup và các nút
              const popupDeleteGroup = document.getElementById("popupDeleteGroup");
              const openDeletePopup = document.getElementById("openDeletePopup");
              const closeDeletePopup = document.getElementById("closeDeletePopup");
              const cancelDeleteBtn = document.getElementById("cancelDeleteBtn");
              const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
              const groupId = "<%= group.id %>";

              // ====== Hàm mở popup ======
              function openPopupDelete() {
                popupDeleteGroup.style.display = "flex";
                popupDeleteGroup.style.alignItems = "center";
                popupDeleteGroup.style.justifyContent = "center";
                popupDeleteGroup.style.backdropFilter = "blur(2px)";
              }

              // ====== Hàm đóng popup ======
              function closePopupDelete() {
                popupDeleteGroup.style.display = "none";
              }

              // ====== Gắn sự kiện ======
              openDeletePopup.addEventListener("click", openPopupDelete);
              closeDeletePopup.addEventListener("click", closePopupDelete);
              cancelDeleteBtn.addEventListener("click", closePopupDelete);

              // Đóng popup khi click ra ngoài
              popupDeleteGroup.addEventListener("click", (e) => {
                if (e.target === popupDeleteGroup) {
                  closePopupDelete();
                }
              });

              // ====== Khi xác nhận xóa nhóm ======
              confirmDeleteBtn.addEventListener("click", async () => {
                closePopupDelete(); // đóng popup ngay

                try {
                  const res = await fetch(`/groups/${groupId}/delete`, {
                    method: "DELETE",
                    credentials: "same-origin"
                  });

                  const result = await res.json();

                  if (res.ok && result.success) {
                    showToast(result.message || "Nhóm đã được xóa thành công!", "success");
                    setTimeout(() => (window.location.href = "/"), 2000);
                  } else {
                    showToast(result.error || "Không thể xóa nhóm.", "error");
                  }
                } catch (err) {
                  console.error(err);
                  showToast("Lỗi khi gửi yêu cầu xóa nhóm.", "error");
                }
              });
            });
          </script>

        </div>
      </div>

      <!-- member context menu -->
      <div id="memberMenu" class="member-menu" role="menu" aria-hidden="true">
        <button type="button" class="menu-item" data-action="view">Xem thông tin</button>
        <button type="button" class="menu-item" data-action="message">Nhắn tin</button>
        <button type="button" class="menu-item" data-action="remove"
          style="color:#d32f2f; display:<%= user.id === group.leaderId ? 'block' : 'none' %>">Xóa thành viên</button>
      </div>

      <!-- POPUP XEM THÔNG TIN THÀNH VIÊN -->
      <div class="popup-overlay" id="popupMemberInfo"
        style="display:none; align-items:center; justify-content:center; backdrop-filter:blur(2px); z-index:1000;">
        <div class="popup-content" style="width:420px; max-width:95vw" role="dialog" aria-modal="true">
          <div class="popup-header"
            style="display:flex; align-items:center; justify-content:space-between; margin-bottom:14px;">
            <div class="popup-title" style="font-size:23px">Thông tin thành viên</div>
            <button class="close-btn" id="closeMemberInfo" style="font-size:28px" aria-label="Đóng">&times;</button>
          </div>

          <form id="memberInfoForm" style="display:flex; flex-direction:column; gap:13px; margin-bottom:22px;">
            <div class="profile-hero">
              <div class="background">
                <img id="bgPreviewMember" alt="background" src="/uploads/default-bg.png" />
              </div>
              <div class="avatar">
                <img id="avatarPreviewMember" alt="avatar" src="/uploads/default-avatar.png" />
              </div>

              <div>
                <input class="name" type="text" name="name" id="memberName" readonly style="flex: 1; padding: 0px 13px">
              </div>

            </div>
            <div class="form-row" style="display:flex; align-items:center; gap:10px">
              <label style="width:110px">Tên tài khoản</label>
              <input id="memberUsername" type="text" readonly
                style="flex:1; padding:10px 13px; border-radius: 5px; border: 1px solid var(--border-color);" />
            </div>
            <div class="form-row" style="display:flex; align-items:center; gap:10px">
              <label style="width:110px">Email</label>
              <input id="memberEmail" type="email" readonly
                style="flex:1; padding:10px 13px; border-radius: 5px; border: 1px solid var(--border-color);" />
            </div>
            <div class="form-row" style="display:flex; align-items:center; gap:10px">
              <label style="width:110px">Số điện thoại</label>
              <input id="memberPhone" type="text" readonly
                style="flex:1; padding:10px 13px; border-radius: 5px; border: 1px solid var(--border-color);" />
            </div>
            <div class="form-row" style="display:flex; align-items:center; gap:10px">
              <label style="width:110px">Ngày sinh</label>
              <input id="memberDob" type="date" readonly
                style="flex:1; padding:10px 13px; border-radius: 5px; border: 1px solid var(--border-color);" />
            </div>
            <div class="form-row" style="display:flex; align-items:center; gap:10px">
              <label style="width:110px">Giới tính</label>
              <input id="memberGender" type="text" readonly
                style="flex:1; padding:10px 13px; border-radius: 5px; border: 1px solid var(--border-color);" />
            </div>
            <div class="form-row" style="display:flex; align-items:center; gap:10px">
              <label style="width:110px">Địa chỉ</label>
              <input id="memberAddress" type="text" readonly
                style="flex:1; padding:10px 13px; border-radius: 5px; border: 1px solid var(--border-color);" />
            </div>
          </form>
        </div>
      </div>

      <!-- POPUP XÓA THÀNH VIÊN -->
      <div class="popup-overlay" id="popupRemoveMember" aria-hidden="true">
        <div class="popup-content" role="dialog" aria-modal="true" aria-labelledby="remove-title">
          <div class="popup-header">
            <div id="remove-title" class="popup-title" style="color: red;">Xóa thành viên</div>
            <button class="close-btn" id="closeRemoveBtn" aria-label="Đóng">&times;</button>
          </div>
          <div style="margin-top:12px">
            <p>Bạn có chắc chắn muốn xóa thành viên này khỏi nhóm không?</p>
            <div style="display:flex;gap:10px;justify-content:flex-end;margin-top:16px">
              <button class="btn" id="removeConfirmNo" type="button" style="background:#9e9e9e">Hủy</button>
              <button class="btn" id="removeConfirmYes" type="button"
                style="background:var(--secondary); background-color: red">
                Xóa thành viên
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- javascript load thành viên -->
      <script>
        async function loadMembers() {
          const membersWrap = document.getElementById("membersWrapRight");
          const memberCountRight = document.getElementById("memberCountRight");
          const groupId = "<%= group.id %>";

          membersWrap.innerHTML = '<div style="padding:10px;color:var(--text-muted);text-align:center">Đang tải...</div>';
          try {
            const res = await fetch(`/groups/${groupId}/members`, { credentials: "same-origin" });
            if (!res.ok) throw new Error("Lỗi khi tải danh sách thành viên");
            const members = await res.json();
            if (members.length === 0) {
              membersWrap.innerHTML = '<div style="padding:10px;color:var(--text-muted);text-align:center">Chưa có thành viên nào.</div>';
              memberCountRight.textContent = "0 thành viên";
              return;
            }

            // === Hàm tạo avatar ===
            const colors = ["#f87171", "#fb923c", "#facc15", "#4ade80", "#60a5fa", "#a78bfa", "#f472b6",];

            const getAvatarHTML = (member) => {
              if (member.avatarPath && member.avatarPath.trim() !== "") {
                // Có ảnh thật
                return `<img src="${member.avatarPath}" style="width: 32px; height: 32px; object-fit: cover; border-radius: 50%;">`;
              } else {
                // Không có ảnh -> chữ cái đầu
                const letter = member.name
                  ? member.name.trim().charAt(0).toUpperCase()
                  : "?";
                const colorKey = `avatarColor_${member.userId}`;
                let bgColor = localStorage.getItem(colorKey);
                if (!bgColor) {
                  bgColor = colors[Math.floor(Math.random() * colors.length)];
                  localStorage.setItem(colorKey, bgColor);
                }
                return `<div style="width: 32px;height: 32px;border-radius: 50%;background: ${bgColor};color: white;font-weight: 600;font-size: 1rem;display: flex;align-items: center;justify-content: center;">${letter}</div>`;
              }
            };

            // === Render danh sách ===
            membersWrap.innerHTML = members
              .map(
                (m) => `
        <div class="member-item" data-userid="${m.userId}" style="display: flex; align-items: center; gap: 8px; padding: 6px 0;">
          <div class="avatar">${getAvatarHTML(m)}</div>
          <div style="flex:1">
            <div style="font-weight:600;color:var(--text)">${m.name}</div>
            <div style="font-size:0.9rem;color:var(--text-muted)">
              ${m.roleInGroup === "leader" ? "👑 Trưởng nhóm" : "👤 Thành viên"}
            </div>
          </div>
        </div>`
              )
              .join("");

            memberCountRight.textContent = `${members.length} thành viên`;
          } catch (err) {
            console.error(err);
            membersWrap.innerHTML = '<div style="padding:10px;color:#ef4444;text-align:center">Không thể tải danh sách thành viên.</div>';
          }
        }

        document.addEventListener("DOMContentLoaded", loadMembers);
      </script>

      <!-- javascript xem, nhắn tin, xóa thành viên -->
      <script>
        const memberMenu = document.getElementById("memberMenu");
        let currentMember = null;

        // Khi click vào 1 thành viên → hiển thị menu
        document.addEventListener("click", (e) => {
          const memberItem = e.target.closest(".member-item");

          // Nếu click vào 1 thành viên
          if (memberItem && memberItem.dataset.userid) {
            e.preventDefault();
            currentMember = memberItem.dataset.userid;

            // Lấy vị trí click
            const rect = memberItem.getBoundingClientRect();
            memberMenu.style.display = "block";
            memberMenu.style.left = `${e.pageX}px`;
            memberMenu.style.top = `${e.pageY}px`;
            memberMenu.setAttribute("aria-hidden", "false");
            return;
          }

          // Nếu click ra ngoài menu thì ẩn menu
          if (!e.target.closest("#memberMenu")) {
            memberMenu.style.display = "none";
            memberMenu.setAttribute("aria-hidden", "true");
          }
        });

        // Xử lý hành động trong menu
        memberMenu.addEventListener("click", async (e) => {
          const action = e.target.dataset.action;
          if (!action || !currentMember) return;

          memberMenu.style.display = "none"; // ẩn menu sau khi chọn

          // Xem thông tin thành viên
          if (action === "view") {
            const popupMemberInfo = document.getElementById("popupMemberInfo");
            const closeMemberInfo = document.getElementById("closeMemberInfo");

            // Đóng popup
            closeMemberInfo.addEventListener("click", () => {
              popupMemberInfo.style.display = "none";
            });

            // Hàm mở popup
            function openMemberInfo(member) {
              document.getElementById("memberName").value = member.name || "";
              document.getElementById("memberUsername").value = member.username || "";
              document.getElementById("memberEmail").value = member.email || "";
              document.getElementById("memberPhone").value = member.phoneNumber || "";
              document.getElementById("memberDob").value = member.dob
                ? new Date(member.dob).toISOString().split("T")[0]
                : "";
              document.getElementById("memberGender").value = member.gender || "";
              document.getElementById("memberAddress").value = member.address || "";
              document.getElementById("avatarPreviewMember").src =
                member.avatarPath || "/uploads/default-avatar.png";
              document.getElementById("bgPreviewMember").src =
                member.backgroundPath || "/uploads/default-bg.png";

              popupMemberInfo.style.display = "flex";
            }

            // Khi chọn “Xem thông tin”
            memberMenu.addEventListener("click", async (e) => {
              const action = e.target.dataset.action;
              if (action === "view" && currentMember) {
                try {
                  const res = await fetch(`/groups/users/${currentMember}/info`);
                  const member = await res.json();
                  if (res.ok) {
                    openMemberInfo(member);
                  } else {
                    alert(member.error || "Không thể tải thông tin thành viên");
                  }
                } catch (err) {
                  console.error(err);
                  alert("Lỗi khi tải thông tin thành viên.");
                }
              }
            });
          }

          // Gửi tin nhắn
          if (action === "message") {
            alert(`💬 Gửi tin nhắn cho: ${currentMember}`);
            // Bạn có thể redirect sang trang chat hoặc mở khung chat
          }

          // --- Popup XÓA THÀNH VIÊN ---
          const popupRemove = document.getElementById("popupRemoveMember");
          const removeConfirmYes = document.getElementById("removeConfirmYes");
          const removeConfirmNo = document.getElementById("removeConfirmNo");
          const closeRemoveBtn = document.getElementById("closeRemoveBtn");
          let memberToRemove = null; // biến tạm lưu id thành viên cần xóa

          // Hiển thị popup xác nhận
          async function showRemovePopup(memberId) {
            memberToRemove = memberId;
            if (popupRemove) {
              popupRemove.classList.add("active");
              popupRemove.setAttribute("aria-hidden", "false");
            }

            const memberMenu = document.querySelector(".member-menu");
            if (memberMenu) memberMenu.classList.remove("show");
          }

          // Xử lý xác nhận XÓA
          removeConfirmYes && removeConfirmYes.addEventListener("click", async () => {
            if (!memberToRemove) return;

            try {
              const groupId = "<%= group.id %>";
              const res = await fetch(`/groups/${groupId}/remove-member`, {
                method: "DELETE",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ userId: memberToRemove }),
                credentials: "same-origin"
              });

              const result = await res.json();

              if (res.ok && result.success) {
                showToast(result.message || "🗑️ Đã xoá thành viên thành công!", "success");
                loadMembers(); // cập nhật danh sách
              } else {
                // Các lỗi phổ biến từ backend: 400, 403, 404, 409, 500
                showToast(result.error || "Không thể xoá thành viên.", "error");
              }
            } catch (err) {
              console.error("Lỗi khi xoá thành viên:", err);
              showToast("⚠️ Lỗi khi gửi yêu cầu xoá thành viên.", "error");
            } finally {
              // Đóng popup dù thành công hay thất bại
              popupRemove.classList.remove("active");
              popupRemove.setAttribute("aria-hidden", "true");
              memberToRemove = null;
            }
          });

          // Nút "Hủy"
          removeConfirmNo &&
            removeConfirmNo.addEventListener("click", () => {
              popupRemove.classList.remove("active");
              popupRemove.setAttribute("aria-hidden", "true");
            });

          // Nút x
          closeRemoveBtn &&
            closeRemoveBtn.addEventListener("click", () => {
              popupRemove.classList.remove("active");
              popupRemove.setAttribute("aria-hidden", "true");
            });

          // Click ra ngoài popup
          popupRemove &&
            popupRemove.addEventListener("click", (e) => {
              if (e.target === popupRemove) {
                popupRemove.classList.remove("active");
                popupRemove.setAttribute("aria-hidden", "true");
              }
            });

          // ESC để đóng
          document.addEventListener("keydown", (e) => {
            if (e.key === "Escape" && popupRemove.classList.contains("active")) {
              popupRemove.classList.remove("active");
              popupRemove.setAttribute("aria-hidden", "true");
            }
          });

          // ================== KHI CLICK XÓA ==================
          if (action === "remove") {
            showRemovePopup(currentMember);
          }
        });
      </script>

      <!-- RIGHT PANEL STACK -->
      <div class="right-panel-stack" id="rightPanelStack">
        <div class="right-panel half" id="calendarPanel">
          <div class="panel-head">
            <span class="panel-title">
              <svg width="20" height="20" style="vertical-align: middle; margin-right: 6px" fill="none"
                stroke="currentColor">
                <rect x="3" y="4" width="14" height="14" rx="2" stroke-width="2" />
                <line x1="7" y1="2" x2="7" y2="6" stroke-width="2" />
                <line x1="13" y1="2" x2="13" y2="6" stroke-width="2" />
              </svg>
              Lịch
            </span>
            <button class="close-panel" id="closeCalendarPanel" title="Đóng">
              &times;
            </button>
          </div>
          <div class="right-section" id="calendarPanelContent"></div>
        </div>

        <div class="right-panel half" id="notifPanel">
          <div class="panel-head">
            <span class="panel-title">
              <svg width="20" height="20" style="vertical-align: middle; margin-right: 6px" fill="none"
                stroke="currentColor">
                <path d="M18 8a6 6 0 10-12 0c0 7-3 9-3 9h18s-3-2-3-9" stroke-width="2"></path>
                <path d="M13.73 21a2 2 0 01-3.46 0" stroke-width="2"></path>
              </svg>
              Thông báo
            </span>
            <button class="close-panel" id="closeNotifPanel" title="Đóng">
              &times;
            </button>
          </div>
          <div class="right-section" id="notifPanelContent"></div>
        </div>
      </div>

      <!-- POPUP THÔNG TIN TÀI KHOẢN -->
      <div class="popup-overlay" id="popupProfile"
        style="display: none; align-items: center; justify-content: center; backdrop-filter: blur(2px); z-index: 1000;"
        aria-hidden="true">
        <div class="popup-content" style="width: 420px; max-width: 95vw" role="dialog" aria-modal="true"
          aria-labelledby="profile-title">
          <div class="popup-header"
            style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 14px;">
            <div id="profile-title" class="popup-title" style="font-size: 23px">Thông tin tài khoản</div>
            <button class="close-btn" id="closeProfileBtn" style="font-size: 28px" aria-label="Đóng">&times;</button>
            <!-- javascript đóng popup hiện thông tin -->
            <script>
              // Lấy phần tử popup và nút đóng
              const popupProfile = document.getElementById('popupProfile');
              const closeProfileBtn = document.getElementById('closeProfileBtn');

              // ===== Account menu & profile popup =====
              const openProfile = document.getElementById("openProfile");
              const userMenu = document.getElementById("userMenu");
              openProfile.addEventListener("click", function (e) {
                e.stopPropagation();
                userMenu.style.display =
                  userMenu.style.display === "block" ? "none" : "block";
              });
              document.addEventListener("mousedown", function (e) {
                if (!openProfile.contains(e.target)) {
                  userMenu.style.display = "none";
                }
              });
              document.getElementById("Profile").onclick = function () {
                document.getElementById("popupProfile").style.display = "flex";
                document
                  .getElementById("popupProfile")
                  .setAttribute("aria-hidden", "false");
                userMenu.style.display = "none";
              };

              // Khi bấm nút X thì ẩn popup
              closeProfileBtn.addEventListener('click', function () {
                popupProfile.style.display = 'none';
              });
            </script>
          </div>

          <!-- FORM -->
          <form class="profile-form" id="profileForm" action="/info" method="POST" enctype="multipart/form-data"
            style=" display: flex; flex-direction: column; gap: 13px; margin-bottom: 22px;">
            <!-- Background + Avatar upload -->
            <div class="profile-hero">
              <div class="background">
                <img id="bgPreview" name="backgroundPath" alt="background"
                  src="<%= user.backgroundPath || '/uploads/default-bg.png' %>" />
                <label class="bg-upload">
                  Thay đổi
                  <input type="file" id="backgroundInput" name="background" accept="image/*" style="display: none"
                    onchange="previewImage(event, 'bgPreview')" />
                </label>
              </div>

              <div class="avatar">
                <img id="avatarPreview" name="avatarPath" alt="avatar"
                  src="<%= user.avatarPath || '/uploads/default-avatar.png' %>" />
                <label class="avatar-upload">
                  ✎
                  <input type="file" id="avatarInput" name="avatar" accept="image/*" style="display: none"
                    onchange="previewImage(event, 'avatarPreview')" />
                </label>
              </div>

              <!-- javascript xem trước avatar và background -->
              <script>
                // Xem trước ảnh
                function previewImage(event, previewId) {
                  const reader = new FileReader();
                  reader.onload = () => {
                    document.getElementById(previewId).src = reader.result;
                  };
                  reader.readAsDataURL(event.target.files[0]);
                }
              </script>
              <!-- Thông tin tài  khoản -->
              <div>
                <input class="name" type="text" name="name" value="<%= user.name || '' %>" readonly>
              </div>
            </div>

            <input type="hidden" name="csrf_token" value="" />
            <div class="form-row" style="display: flex; align-items: center; gap: 10px">
              <label class="form-label" for="username" style="width: 110px">Tên tài khoản</label>
              <input class="form-input" name="username" type="text" value="<%= user.username %>" readonly id="username"
                style="flex: 1; padding: 10px 13px" />
            </div>
            <div class="form-row" style="display: flex; align-items: center; gap: 10px">
              <label class="form-label" for="email" style="width: 110px">Email</label>
              <input class="form-input" name="email" type="email" value="<%= user.email %>" readonly id="email"
                style="flex: 1; padding: 10px 13px" />
            </div>
            <div class="form-row" style="display: flex; align-items: center; gap: 10px">
              <label class="form-label" for="phone" style="width: 110px">Số điện thoại</label>
              <input class="form-input" name="phoneNumber" type="text" value="<%= user.phoneNumber || '' %>" readonly
                id="phone" style="flex: 1; padding: 10px 13px" />
            </div>
            <div class="form-row" style="display: flex; align-items: center; gap: 10px">
              <label class="form-label" for="dob" style="width: 110px">Ngày sinh</label>
              <input class="form-input" name="dob" type="date"
                value="<%= user.dob ? new Date(user.dob).toISOString().split('T')[0] : '' %>" readonly id="dob"
                style="flex: 1; padding: 10px 13px" />
            </div>
            <div class="form-row" style="display: flex; align-items:center; gap:10px">
              <label class="form-label" for="gender" style="width: 110px">Giới tính</label>
              <input class="form-input" name="gender" type="text" value="<%=user.gender || '' %>" readonly id="gender"
                style="flex: 1; padding: 10px 13px" />
            </div>
            <div class="form-row" style="display: flex; align-items: center; gap: 10px">
              <label class="form-label" for="address" style="width: 110px">Địa chỉ</label>
              <input class="form-input" name="address" type="text" value="<%= user.address || '' %>" readonly
                id="address" style="flex: 1; padding: 10px 13px" />
            </div>
          </form>
          <!------------------------------------------- POPUP XÁC NHẬN ------------------------------------------->
          <div class="confirm-overlay" id="confirmOverlay"
            style="display:none; position:fixed; inset:0; background:rgba(0,0,0,0.35); align-items:center; justify-content:center; z-index:1100;">
            <div class="confirm-box"
              style="background:#fff; padding:22px 28px; border-radius:10px; text-align:center; box-shadow:0 4px 10px rgba(0,0,0,0.1); transform:scale(0.95); transition:all 0.2s ease;">
              <p style="margin-bottom:15px; font-size:17px; font-weight:500; color:var(--text);">Bạn có chắc chắn không?
              </p>
              <div style="display:flex; justify-content:center; gap:10px;">
                <button id="confirmYes" class="btn"
                  style="background:#4CAF50; color:white; padding:6px 14px; border:none; border-radius:6px; cursor:pointer;">Xác
                  nhận</button>
                <button id="confirmNo" class="btn"
                  style="background:#f44336; color:white; padding:6px 14px; border:none; border-radius:6px; cursor:pointer;">Hủy</button>
              </div>
            </div>
          </div>
          <!------------------------------------------------------------------------------------------------------>
          <script>
            const profileForm = document.getElementById('profileForm');
            const avatarInput = document.getElementById('avatarInput');
            const backgroundInput = document.getElementById('backgroundInput');
            const confirmOverlay = document.getElementById('confirmOverlay');
            const confirmYes = document.getElementById('confirmYes');
            const confirmNo = document.getElementById('confirmNo');
            //const popupProfile = document.getElementById('popupProfile');

            // Khi chọn ảnh mới -> hiện popup xác nhận
            avatarInput.addEventListener('change', handleImageChange);
            backgroundInput.addEventListener('change', handleImageChange);

            function handleImageChange(event) {
              const file = event.target.files[0];
              if (!file) return;
              previewImage(event, event.target.id === 'avatarInput' ? 'avatarPreview' : 'bgPreview');
              confirmOverlay.style.display = 'flex';
            }

            // Hàm xem trước ảnh
            function previewImage(event, previewId) {
              const file = event.target.files[0];
              if (!file) return;
              const reader = new FileReader();
              reader.onload = (e) => {
                document.getElementById(previewId).src = e.target.result;
              };
              reader.readAsDataURL(file);
            }

            // Khi bấm “Xác nhận” => submit form + đóng popup
            confirmYes.addEventListener('click', () => {
              confirmOverlay.style.display = 'none';
              profileForm.submit(); // gửi form để backend lưu vào DB
              popupProfile.style.display = 'none'; // đóng popup thông tin
            });

            // Khi bấm “Hủy” => đóng popup xác nhận
            confirmNo.addEventListener('click', () => {
              confirmOverlay.style.display = 'none';
              avatarInput.value = "";
              backgroundInput.value = "";
            });
          </script>

        </div>
      </div>

      <!-- ========== WORKHUB SETTINGS OVERLAY ========== -->
      <div id="whSettings" class="wh-settings" aria-hidden="true">
        <!-- Sidebar cài đặt -->
        <div class="wh-wrap">
          <aside class="wh-side">
            <div class="wh-search"><input placeholder="Tìm kiếm..." /></div>
            <div class="wh-group">CÀI ĐẶT NGƯỜI DÙNG</div>
            <nav class="wh-nav">
              <button class="wh-nav-item wh-active" data-view="account">
                Tài Khoản Của Tôi
              </button>
              <!-- chưa nghĩ ra cài đặt gì khác -->
            </nav>
            <div class="wh-group">CÀI ĐẶT TRANG WEB</div>
            <nav class="wh-nav">
              <button></button>
              <!-- chưa nghĩ ra cài đặt gì khác -->
            </nav>
          </aside>

          <main class="wh-main">
            <header class="wh-topbar">
              <div class="wh-title">Tài Khoản Của Tôi</div>
              <button class="wh-btn wh-primary" id="whClose" title="ESC">
                Đóng
              </button>
            </header>
            <!-- Thông tin tài khoản ------------------------------------------------------------>
            <form class="wh-card" action="/info" method="post" id="settingInfoAccount">
              <div class="wh-row">
                <div>
                  <div class="wh-label">Tên hiển thị</div>
                  <input class="form-input" type="text" name="name" value="<%= user.name || '' %>" readonly
                    style="flex: 1; padding: 10px 13px">
                </div>
              </div>
              <div class="wh-row">
                <div>
                  <div class="wh-label">Tên đăng nhập</div>
                  <input class="form-input" name="username" type="text" value="<%= user.username %>" readonly
                    id="username" style="flex: 1; padding: 10px 13px" />
                </div>
              </div>
              <div class="wh-row">
                <div>
                  <div class="wh-label">Email</div>
                  <input class="form-input" name="email" type="email" value="<%= user.email %>" readonly id="email"
                    style="flex: 1; padding: 10px 13px" />
                </div>
              </div>
              <div class="wh-row">
                <div>
                  <div class="wh-label">Số Điện Thoại</div>
                  <input class="form-input" name="phoneNumber" type="text" value="<%= user.phoneNumber || '' %>"
                    readonly id="phone" style="flex: 1; padding: 10px 13px" />
                </div>
              </div>
              <div class="wh-row">
                <div>
                  <div class="wh-label">Ngày sinh</div>
                  <input class="form-input" name="dob" type="date"
                    value="<%= user.dob ? new Date(user.dob).toISOString().split('T')[0] : '' %>" readonly id="dob"
                    style="flex: 1; padding: 10px 13px" />
                </div>
              </div>
              <div class="wh-row">
                <div>
                  <div class="wh-label">Giới tính</div>
                  <select class="form-input" name="gender" id="gender" disabled style="flex: 1; padding: 10px 13px">
                    <option value="">--Chọn--</option>
                    <option value="male" <%=user.gender==='male' ? 'selected' : '' %>>Nam</option>
                    <option value="female" <%=user.gender==='female' ? 'selected' : '' %>>Nữ</option>
                    <option value="other" <%=user.gender==='other' ? 'selected' : '' %>>Khác</option>
                  </select>
                </div>
              </div>
              <div class="wh-row">
                <div>
                  <div class="wh-label">Địa chỉ</div>
                  <input class="form-input" name="address" type="text" value="<%= user.address || '' %>" readonly
                    id="address" style="flex: 1; padding: 10px 13px" />
                </div>
              </div>
              <div class="wh-btnEditProfile" style="margin-top: 10px; text-align: center;">
                <button class="btn" type="button" id="editProfileBtn" style="background: var(--secondary)">Sửa</button>
                <button class="btn" type="submit" id="saveProfileBtn"
                  style="display: none; background: var(--secondary)">Xác nhận</button>
              </div>

              <!-- javascript sửa thông tin -->
              <script>
                const editBtn = document.getElementById("editProfileBtn");
                const saveBtn = document.getElementById("saveProfileBtn");

                editBtn.addEventListener("click", () => {
                  // Ẩn nút "Sửa"
                  editBtn.style.display = "none";

                  // Hiện nút "Xác nhận"
                  saveBtn.style.display = "inline-block";

                  // Mở khóa các input (trừ username và email)
                  document.querySelectorAll("input[readonly], select[disabled]").forEach(el => {
                    const fieldName = el.getAttribute("name");
                    if (fieldName !== "username" && fieldName !== "email") {
                      el.removeAttribute("readonly");
                      el.removeAttribute("disabled");
                      el.style.background = "#fff";
                    }
                  });
                });

                // Khi bấm "Xác nhận" thì đổi lại nút "Sửa"
                saveBtn.addEventListener("click", () => {
                  editBtn.style.display = "inline-block";
                  saveBtn.style.display = "none";
                });
              </script>
            </form>
            <!-- ----------------------------------------------------------------------------------------- -->
            <div class="wh-tabs">
              <button class="wh-tab wh-active" data-tab="security">
                Bảo mật
              </button>
              <button class="wh-tab" data-tab="status">Trạng thái</button>
            </div>
            <div class="wh-panel wh-show" data-tab="security">
              <h3 class="wh-section">Mật Khẩu và Xác Thực</h3>
              <div class="wh-card">
                <div class="wh-row wh-between">
                  <div>
                    <div class="wh-t">Đổi Mật Khẩu</div>
                    <div class="wh-sub">
                      Cập nhật mật khẩu để bảo vệ tài khoản.
                    </div>
                  </div>
                  <button class="wh-btn wh-primary">Đổi Mật Khẩu</button>
                </div>
                <hr style="border: 0; border-top: 1px solid var(--border-color)" />
                <div class="wh-row wh-between">
                  <div>
                    <div class="wh-t">Ứng Dụng Xác Thực</div>
                    <div class="wh-sub">
                      Thêm lớp bảo mật bổ sung khi đăng nhập.
                    </div>
                  </div>
                  <button class="wh-btn wh-primary">
                    Bật Ứng Dụng Xác Thực
                  </button>
                </div>
                <hr style="border: 0; border-top: 1px solid var(--border-color)" />
                <div class="wh-row wh-between">
                  <div>
                    <div class="wh-t">Mã bảo mật</div>
                    <div class="wh-sub">
                      Tạo mã dự phòng để đăng nhập an toàn.
                    </div>
                  </div>
                  <button class="wh-btn wh-secondary">
                    Đăng ký Mã Bảo Mật
                  </button>
                </div>
              </div>
              <div class="wh-card wh-danger-zone">
                <h4 class="wh-section">Ngừng Sử Dụng Tài Khoản</h4>
                <div class="wh-row" style="gap: 10px">
                  <button class="wh-btn wh-danger">
                    Vô Hiệu Hóa Tài Khoản
                  </button>
                  <button class="wh-btn wh-outline">Xóa Tài Khoản</button>
                </div>
              </div>
            </div>
            <div class="wh-panel" data-tab="status">
              <div class="wh-card">
                <div class="wh-row wh-between">
                  <div>
                    <div class="wh-t">Trạng thái tài khoản</div>
                    <div class="wh-sub">Tài khoản hoạt động bình thường.</div>
                  </div>
                  <span class="wh-pill-ok">Đang hoạt động</span>
                </div>
              </div>
            </div>
          </main>
        </div>
      </div>

      <!-- ========== /WORKHUB SETTINGS OVERLAY ========== -->
      <!-- javascript mở trang cài đặt -->
      <script>
        const whOverlay = document.getElementById("whSettings");
        const whBtnOpen = document.getElementById("OpenSettings");
        const whBtnClose = document.getElementById("whClose");

        if (whBtnOpen) {
          whBtnOpen.addEventListener("click", () => {
            whOverlay.style.display = "block";
            if (userMenu) userMenu.style.display = "none";
          });
        }
        if (whBtnClose) {
          whBtnClose.addEventListener("click", () => {
            whOverlay.style.display = "none";
          });
        }
        document.addEventListener("keydown", (e) => {
          if (e.key === "Escape" && whOverlay.style.display === "block") {
            whOverlay.style.display = "none";
          }
        });

        // Tabs trong trang cài đặt
        document.querySelectorAll(".wh-tab").forEach((tab) => {
          tab.addEventListener("click", () => {
            document
              .querySelectorAll(".wh-tab")
              .forEach((t) => t.classList.remove("wh-active"));
            document
              .querySelectorAll(".wh-panel")
              .forEach((p) => p.classList.remove("wh-show"));
            tab.classList.add("wh-active");
            document
              .querySelector(`.wh-panel[data-tab="${tab.dataset.tab}"]`)
              ?.classList.add("wh-show");
          });
        });

        // Sidebar highlight
        document.querySelectorAll(".wh-nav-item").forEach((btn) => {
          btn.addEventListener("click", () => {
            document
              .querySelectorAll(".wh-nav-item")
              .forEach((b) => b.classList.remove("wh-active"));
            btn.classList.add("wh-active");
          });
        });
      </script>
    </div>

    <script>
      // ===== CONFIG =====
      const USE_FETCH = true;
      const API = {
        createGroup: "/groups",
        updateProfile: "/api/profile/update",
      };

      // Xem trước hình (background/avatar)
      function previewImage(evt, targetId) {
        const file = evt.target.files?.[0];
        if (!file) return;
        const url = URL.createObjectURL(file);
        const img = document.getElementById(targetId);
        if (img) {
          img.src = url;
        }
      }

      // Create-group UI removed. The sidebar button opens addmembers.html in a new tab.

      // ===== Theme =====
      const THEME_KEY = "workhub-theme";
      const themeBtn = document.getElementById("btnTheme");
      const themeIcon = document.getElementById("themeIcon");

      function getPreferredTheme() {
        const saved = localStorage.getItem(THEME_KEY);
        if (saved === "light" || saved === "dark") return saved;
        return window.matchMedia &&
          window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      }
      function applyTheme(t) {
        document.documentElement.setAttribute("data-theme", t);
        themeBtn.title =
          t === "dark" ? "Chuyển sang sáng" : "Chuyển sang tối";
        themeBtn.setAttribute("aria-pressed", t === "dark");
        themeIcon.innerHTML =
          t === "dark"
            ? `<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" stroke-width="2"/>`
            : `<circle cx="12" cy="12" r="5" stroke-width="2"/> 
                 <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42" stroke-width="2"/>`;
      }
      function toggleTheme() {
        const current =
          document.documentElement.getAttribute("data-theme") || "light";
        const next = current === "dark" ? "light" : "dark";
        localStorage.setItem(THEME_KEY, next);
        applyTheme(next);
      }
      applyTheme(getPreferredTheme());
      themeBtn.addEventListener("click", toggleTheme);

      // Tabs (toolbar)
      document.querySelectorAll(".tab-btn").forEach((btn) => {
        btn.addEventListener("click", () => {
          document
            .querySelectorAll(".tab-btn")
            .forEach((b) => b.classList.remove("active"));
          btn.classList.add("active");
        });
      });

      // Right panels
      const notifPanel = document.getElementById("notifPanel");
      const notifPanelContent = document.getElementById("notifPanelContent");
      const calendarPanel = document.getElementById("calendarPanel");
      const calendarPanelContent = document.getElementById(
        "calendarPanelContent"
      );
      const closeNotifPanel = document.getElementById("closeNotifPanel");
      const closeCalendarPanel =
        document.getElementById("closeCalendarPanel");
      const btnNotif = document.getElementById("btnNotif");
      const btnCalendar = document.getElementById("btnCalendar");

      let panelOrder = [];
      function showPanel(panel) {
        if (panelOrder.includes(panel)) {
          closePanel(panel);
          return;
        }
        panelOrder = [panel, ...panelOrder];
        if (panelOrder.length > 2) panelOrder = panelOrder.slice(0, 2);

        notifPanel.classList.remove("top", "bottom", "show");
        calendarPanel.classList.remove("top", "bottom", "show");

        function renderNotif() {
          notifPanelContent.innerHTML = `
            <div class="notif-list">
              <div class="notif-item"><div class="notif-dot"></div>Nội dung thông báo</div>
              <div class="notif-item"><div class="notif-dot"></div>Nội dung thông báo</div>
              <div class="notif-item"><div class="notif-dot"></div>Nội dung thông báo</div>
              <div class="notif-item"><div class="notif-dot"></div>Nội dung thông báo</div>
            </div>
          `;
        }
        function renderCalendar() {
          calendarPanelContent.innerHTML = `
            <div class="calendar-card" id="calendarCard">
              <div class="calendar-head">
                <div>
                  <div class="calendar-title" id="titleDay">Hôm nay</div>
                  <div class="calendar-sub" id="subMonth"></div>
                </div>
                <div>
                  <button class="btn" id="prevMth">◀</button>
                  <button class="btn" id="nextMth">▶</button>
                </div>
              </div>
              <div class="calendar-grid" id="calGrid"></div>
            </div>
          `;
          setTimeout(initCalendar, 0);
        }

        if (panelOrder.length === 1) {
          if (panelOrder[0] === "notif") {
            notifPanel.classList.add("show", "top");
            renderNotif();
          } else {
            calendarPanel.classList.add("show", "top");
            renderCalendar();
          }
        } else {
          if (panelOrder[0] === "notif" && panelOrder[1] === "calendar") {
            notifPanel.classList.add("show", "top");
            calendarPanel.classList.add("show", "bottom");
            renderNotif();
          } else {
            calendarPanel.classList.add("show", "top");
            notifPanel.classList.add("show", "bottom");
            renderCalendar();
          }
        }
      }
      function closePanel(panel) {
        panelOrder = panelOrder.filter((p) => p !== panel);
        notifPanel.classList.remove("top", "bottom", "show");
        calendarPanel.classList.remove("top", "bottom", "show");
        if (panelOrder.length === 1) {
          if (panelOrder[0] === "notif") {
            notifPanel.classList.add("show", "top");
          } else {
            calendarPanel.classList.add("show", "top");
          }
        }
      }
      btnNotif.onclick = () => showPanel("notif");
      btnCalendar.onclick = () => showPanel("calendar");
      closeNotifPanel &&
        (closeNotifPanel.onclick = () => closePanel("notif"));
      closeCalendarPanel &&
        (closeCalendarPanel.onclick = () => closePanel("calendar"));
      document.addEventListener("mousedown", (e) => {
        if (
          notifPanel.classList.contains("show") &&
          !notifPanel.contains(e.target) &&
          !btnNotif.contains(e.target)
        )
          closePanel("notif");
        if (
          calendarPanel.classList.contains("show") &&
          !calendarPanel.contains(e.target) &&
          !btnCalendar.contains(e.target)
        )
          closePanel("calendar");
      });

      function initCalendar() {
        const calGrid = document.getElementById("calGrid");
        const titleDay = document.getElementById("titleDay");
        const subMonth = document.getElementById("subMonth");
        const prevMth = document.getElementById("prevMth");
        const nextMth = document.getElementById("nextMth");

        let view = new Date();
        function headText(d) {
          return new Intl.DateTimeFormat("vi-VN", {
            weekday: "short",
            month: "short",
            day: "2-digit",
          }).format(d);
        }
        function buildCalendar(date) {
          const y = date.getFullYear(),
            m = date.getMonth();
          titleDay.textContent = headText(new Date());
          subMonth.textContent = new Intl.DateTimeFormat("vi-VN", {
            month: "long",
            year: "numeric",
          })
            .format(new Date(y, m, 1))
            .toUpperCase();
          const first = new Date(y, m, 1);
          const start = (first.getDay() + 6) % 7; // Monday first
          const days = new Date(y, m + 1, 0).getDate();
          const prevDays = new Date(y, m, 0).getDate();
          const parts = [];
          ["T2", "T3", "T4", "T5", "T6", "T7", "CN"].forEach((d) =>
            parts.push(`<div class="dow">${d}</div>`)
          );
          for (let i = 0; i < 42; i++) {
            let label,
              cls = "cell";
            if (i < start) {
              label = prevDays - start + i + 1;
              cls += " faded";
            } else if (i < start + days) {
              label = i - start + 1;
            } else {
              label = i - (start + days) + 1;
              cls += " faded";
            }
            const today = new Date();
            if (
              y === today.getFullYear() &&
              m === today.getMonth() &&
              label === today.getDate() &&
              !cls.includes("faded")
            )
              cls += " today";
            parts.push(`<div class="${cls}">${label}</div>`);
          }
          calGrid.innerHTML = parts.join("");
        }
        prevMth.addEventListener("click", () => {
          view.setMonth(view.getMonth() - 1);
          buildCalendar(view);
        });
        nextMth.addEventListener("click", () => {
          view.setMonth(view.getMonth() + 1);
          buildCalendar(view);
        });
        buildCalendar(view);
      }

      // ===== WORKHUB SETTINGS (mở/đóng) =====

      //Đăng xuất với hộp thoại xác nhận
      const logoutBtn = document.getElementById("Logout");
      const logoutConfirm = document.getElementById("popupLogout");
      const logoutConfirmYes = document.getElementById("logoutConfirmYes");
      const logoutConfirmNo = document.getElementById("logoutConfirmNo");

      logoutBtn && logoutBtn.addEventListener("click", (e) => {
        e.preventDefault();
        if (logoutConfirm) {
          logoutConfirm.classList.add("active");
          logoutConfirm.setAttribute("aria-hidden", "false");
        } else {
          // chuyển hướng
          window.location.href = "/auth/logout";
        }
        // ẩn user menu
        if (userMenu) userMenu.style.display = "none";
      });

      // confirm
      logoutConfirmYes && logoutConfirmYes.addEventListener("click", () => {
        window.location.href = "/auth/logout";
      });
      logoutConfirmNo && logoutConfirmNo.addEventListener("click", () => {
        if (logoutConfirm) {
          logoutConfirm.classList.remove("active");
          logoutConfirm.setAttribute("aria-hidden", "true");
        }
      });
      const closeLogoutBtn = document.getElementById("closeLogoutBtn");
      closeLogoutBtn && closeLogoutBtn.addEventListener("click", () => {
        if (logoutConfirm) {
          logoutConfirm.classList.remove("active");
          logoutConfirm.setAttribute("aria-hidden", "true");
        }
      });

      // Nhấn X hoặc click ra ngoài để thoát
      if (logoutConfirm) {
        logoutConfirm.addEventListener("click", (e) => {
          if (e.target === logoutConfirm) {
            logoutConfirm.classList.remove("active");
            logoutConfirm.setAttribute("aria-hidden", "true");
          }
        });
        document.addEventListener("keydown", (e) => {
          if (e.key === "Escape" && logoutConfirm.classList.contains("active")) {
            logoutConfirm.classList.remove("active");
            logoutConfirm.setAttribute("aria-hidden", "true");
          }
        });
      }
    </script>

    <!-- Socket.io client -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const socket = io(); // tự động kết nối đến backend

        const chatId = "<%= chatId %>";
        const userId = "<%= user.id %>";
        const username = "<%= user.name %>";
        const avatarPath = "<%= user.avatarPath || '/uploads/default-avatar.png' %>";

        const outputChat = document.querySelector(".outputChat");
        const input = document.getElementById("messageInput");
        const sendBtn = document.querySelector(".sendMessage");

        // ========== THAM GIA PHÒNG CHAT ==========
        socket.emit("joinChat", chatId);

        // ========== LOAD TIN NHẮN CŨ ==========
        async function loadMessages() {
          try {
            console.log("Fetching messages from:", `/chat/${chatId}/messages`);
            const res = await fetch(`/chat/${chatId}/messages`);
            console.log("Response status:", res.status);
            if (!res.ok) throw new Error("Không thể tải tin nhắn");
            const messages = await res.json();
            outputChat.innerHTML = "";
            messages.forEach(renderMessage);
            outputChat.scrollTop = outputChat.scrollHeight;
          } catch (err) {
            console.error("Lỗi khi loadMessages:", err);
            outputChat.innerHTML = `<div style="color:red;padding:10px;">Lỗi tải tin nhắn.</div>`;
          }
        }

        // ========== HIỂN THỊ TIN NHẮN ==========  
        function renderMessage(msg) {
          const mine = msg.senderId === "<%= user.id %>";
          const time = new Date(msg.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

          const div = document.createElement("div");
          div.classList.add("chat-row", mine ? "mine" : "other");

          div.innerHTML = `
    ${!mine ? `
      <img class="avatar" src="${msg.avatarPath || '/uploads/default-avatar.png'}" alt="">
      <div class="chat-content">
        <div class="name">${msg.username || 'Người dùng'}</div>
        <div class="bubble bubble-other">${msg.content}</div>
        <div class="time-other">${time}</div>
      </div>
    ` : `
      <div class="chat-content">
        <div class="bubble bubble-mine">${msg.content}</div>
        <div class="time-mine">${time}</div>
      </div>
      <img class="avatar" src="${msg.avatarPath || '/uploads/default-avatar.png'}" alt="">
    `}
  `;

          document.querySelector(".outputChat").appendChild(div);
        }

        // ========== GỬI TIN NHẮN ==========
        sendBtn.addEventListener("click", sendMessage);
        input.addEventListener("keypress", (e) => {
          if (e.key === "Enter") sendMessage();
        });

        function sendMessage() {
          const content = input.value.trim();
          if (!content) return;

          socket.emit("sendMessage", {
            chatId,
            senderId: userId,
            content,
            messageType: "text"
          });

          input.value = "";
        }

        // ========== NHẬN TIN NHẮN MỚI ==========
        socket.on("newMessage", (msg) => {
          renderMessage(msg);
          outputChat.scrollTop = outputChat.scrollHeight;
        });

        // ========== NGẮT KẾT NỐI ==========
        window.addEventListener("beforeunload", () => {
          socket.emit("leaveChat", chatId);
          socket.disconnect();
        });

        // Tải tin nhắn ban đầu
        loadMessages();
      });
    </script>

  </div>
</body>

</html>